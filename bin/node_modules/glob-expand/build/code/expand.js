/*!
* glob-expand - version 0.0.2
* Compiled on 2013-05-27
* git://github.com/anodynos/node-glob-expand
* Copyright(c) 2013 Agelos Pikoulas (agelos.pikoulas@gmail.com )
* Licensed MIT http://www.opensource.org/licenses/mit-license.php
*/
var VERSION = '0.0.2'; //injected by grunt:concat
// Generated by CoffeeScript 1.6.2
var expand, fs, glob, path, processPatterns, _,
  __slice = [].slice;

_ = require('lodash');

glob = require('glob');

fs = require('fs');

path = require('path');

expand = function() {
  var args, matches, options, patterns;

  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  options = _.isObject(args[0]) ? args.shift() : {};
  patterns = (_.isArray(args[0]) ? args[0] : args);
  if (patterns.length === 0) {
    return [];
  }
  matches = processPatterns(patterns, function(pattern) {
    if (_.isString(pattern)) {
      return glob.sync(pattern, options);
    } else {
      if (_.isRegExp(pattern)) {
        return _.filter(glob.sync('**/*.*', options), function(filename) {
          return filename.match(pattern);
        });
      } else {
        return [];
      }
    }
  });
  if (options.filter) {
    matches = matches.filter(function(filepath) {
      var e;

      filepath = path.join(options.cwd || "", filepath);
      try {
        if (_.isFunction(options.filter)) {
          return options.filter(filepath);
        } else {
          return fs.statSync(filepath)[options.filter]();
        }
      } catch (_error) {
        e = _error;
        return false;
      }
    });
  }
  return matches;
};

processPatterns = function(patterns, fn) {
  var result;

  result = [];
  _.flatten(patterns).forEach(function(pattern) {
    var exclusion, matches;

    exclusion = _.isString(pattern) && pattern.indexOf("!") === 0;
    if (exclusion) {
      pattern = pattern.slice(1);
    }
    matches = fn(pattern);
    if (exclusion) {
      return result = _.difference(result, matches);
    } else {
      return result = _.union(result, matches);
    }
  });
  return result;
};

module.exports = expand;

_.extend(expand, {
  glob: glob,
  VERSION: typeof VERSION !== "undefined" && VERSION !== null ? VERSION : '{NO_VERSION}'
});
